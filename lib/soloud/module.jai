
// SoLoud wrapper for Jai
// This file is autogenerated; any changes will be overwritten

// Types

#module_parameters(LINK_STATIC := false);

Soloud :: struct { _handle_value: *void; }
AlignedFloatBuffer :: struct { _handle_value: *void; }
TinyAlignedFloatBuffer :: struct { _handle_value: *void; }
AudioCollider :: struct { _handle_value: *void; }
AudioAttenuator :: struct { _handle_value: *void; }
AudioSource :: struct { _handle_value: *void; }
BassboostFilter :: struct { using _base: Filter; }
BiquadResonantFilter :: struct { _handle_value: *void; }
Bus :: struct { _handle_value: *void; }
DCRemovalFilter :: struct { _handle_value: *void; }
EchoFilter :: struct { _handle_value: *void; }
Fader :: struct { _handle_value: *void; }
FFTFilter :: struct { _handle_value: *void; }
Filter :: struct { _handle_value: *void; }
FlangerFilter :: struct { _handle_value: *void; }
FreeverbFilter :: struct { _handle_value: *void; }
LofiFilter :: struct { _handle_value: *void; }
Monotone :: struct { _handle_value: *void; }
Noise :: struct { _handle_value: *void; }
Openmpt :: struct { _handle_value: *void; }
Queue :: struct { using _base: AudioSource; }
RobotizeFilter :: struct { _handle_value: *void; }
Sfxr :: struct { using _base: AudioSource; }
Speech :: struct { using _base: AudioSource; }
TedSid :: struct { _handle_value: *void; }
Vic :: struct { _handle_value: *void; }
Vizsn :: struct { _handle_value: *void; }
Wav :: struct { using _base: AudioSource; }
WaveShaperFilter :: struct { _handle_value: *void; }
WavStream :: struct { using _base: AudioSource; }

// Enums

SOLOUD_AUTO :: 0;
SOLOUD_SDL1 :: 1;
SOLOUD_SDL2 :: 2;
SOLOUD_PORTAUDIO :: 3;
SOLOUD_WINMM :: 4;
SOLOUD_XAUDIO2 :: 5;
SOLOUD_WASAPI :: 6;
SOLOUD_ALSA :: 7;
SOLOUD_JACK :: 8;
SOLOUD_OSS :: 9;
SOLOUD_OPENAL :: 10;
SOLOUD_COREAUDIO :: 11;
SOLOUD_OPENSLES :: 12;
SOLOUD_VITA_HOMEBREW :: 13;
SOLOUD_MINIAUDIO :: 14;
SOLOUD_NOSOUND :: 15;
SOLOUD_NULLDRIVER :: 16;
SOLOUD_BACKEND_MAX :: 17;
SOLOUD_CLIP_ROUNDOFF :: 1;
SOLOUD_ENABLE_VISUALIZATION :: 2;
SOLOUD_LEFT_HANDED_3D :: 4;
SOLOUD_NO_FPU_REGISTER_CHANGE :: 8;
BASSBOOSTFILTER_WET :: 0;
BASSBOOSTFILTER_BOOST :: 1;
BIQUADRESONANTFILTER_LOWPASS :: 0;
BIQUADRESONANTFILTER_HIGHPASS :: 1;
BIQUADRESONANTFILTER_BANDPASS :: 2;
BIQUADRESONANTFILTER_WET :: 0;
BIQUADRESONANTFILTER_TYPE :: 1;
BIQUADRESONANTFILTER_FREQUENCY :: 2;
BIQUADRESONANTFILTER_RESONANCE :: 3;
ECHOFILTER_WET :: 0;
ECHOFILTER_DELAY :: 1;
ECHOFILTER_DECAY :: 2;
ECHOFILTER_FILTER :: 3;
FLANGERFILTER_WET :: 0;
FLANGERFILTER_DELAY :: 1;
FLANGERFILTER_FREQ :: 2;
FREEVERBFILTER_WET :: 0;
FREEVERBFILTER_FREEZE :: 1;
FREEVERBFILTER_ROOMSIZE :: 2;
FREEVERBFILTER_DAMP :: 3;
FREEVERBFILTER_WIDTH :: 4;
LOFIFILTER_WET :: 0;
LOFIFILTER_SAMPLERATE :: 1;
LOFIFILTER_BITDEPTH :: 2;
NOISE_WHITE :: 0;
NOISE_PINK :: 1;
NOISE_BROWNISH :: 2;
NOISE_BLUEISH :: 3;
ROBOTIZEFILTER_WET :: 0;
ROBOTIZEFILTER_FREQ :: 1;
ROBOTIZEFILTER_WAVE :: 2;
SFXR_COIN :: 0;
SFXR_LASER :: 1;
SFXR_EXPLOSION :: 2;
SFXR_POWERUP :: 3;
SFXR_HURT :: 4;
SFXR_JUMP :: 5;
SFXR_BLIP :: 6;
SPEECH_KW_SAW :: 0;
SPEECH_KW_TRIANGLE :: 1;
SPEECH_KW_SIN :: 2;
SPEECH_KW_SQUARE :: 3;
SPEECH_KW_PULSE :: 4;
SPEECH_KW_NOISE :: 5;
SPEECH_KW_WARBLE :: 6;
VIC_PAL :: 0;
VIC_NTSC :: 1;
VIC_BASS :: 0;
VIC_ALTO :: 1;
VIC_SOPRANO :: 2;
VIC_NOISE :: 3;
VIC_MAX_REGS :: 4;
WAVESHAPERFILTER_WET :: 0;
WAVESHAPERFILTER_AMOUNT :: 1;

// Functions

Soloud_destroy :: (Soloud_instance: *Soloud) #foreign soloud_lib;
Soloud_create :: () -> *Soloud #foreign soloud_lib;
Soloud_init :: (Soloud_instance: *Soloud, Flags: u32 = SOLOUD_CLIP_ROUNDOFF, Backend: u32 = SOLOUD_AUTO, Samplerate: u32 = SOLOUD_AUTO, BufferSize: u32 = SOLOUD_AUTO, Channels: u32 = 2) -> s32 #foreign soloud_lib;
Soloud_deinit :: (Soloud_instance: *Soloud) #foreign soloud_lib;
Soloud_getVersion :: (Soloud_instance: *Soloud) -> u32 #foreign soloud_lib;
Soloud_getErrorString :: (Soloud_instance: *Soloud, ErrorCode: s32) -> *u8 #foreign soloud_lib;
Soloud_getBackendId :: (Soloud_instance: *Soloud) -> u32 #foreign soloud_lib;
Soloud_getBackendString :: (Soloud_instance: *Soloud) -> *u8 #foreign soloud_lib;
Soloud_getBackendChannels :: (Soloud_instance: *Soloud) -> u32 #foreign soloud_lib;
Soloud_getBackendSamplerate :: (Soloud_instance: *Soloud) -> u32 #foreign soloud_lib;
Soloud_getBackendBufferSize :: (Soloud_instance: *Soloud) -> u32 #foreign soloud_lib;
Soloud_setSpeakerPosition :: (Soloud_instance: *Soloud, Channel: u32, X: float, Y: float, Z: float) -> s32 #foreign soloud_lib;
Soloud_getSpeakerPosition :: (Soloud_instance: *Soloud, Channel: u32, X: *float, Y: *float, Z: *float) -> s32 #foreign soloud_lib;
Soloud_play :: (Soloud_instance: *Soloud, Sound: *AudioSource, Volume: float = -1.0, Pan: float = 0.0, Paused: s32 = 0, Bus_instance: u32 = 0) -> u32 #foreign soloud_lib;
Soloud_playClocked :: (Soloud_instance: *Soloud, SoundTime: float64, Sound: *AudioSource, Volume: float = -1.0, Pan: float = 0.0, Bus_instance: u32 = 0) -> u32 #foreign soloud_lib;
Soloud_play3d :: (Soloud_instance: *Soloud, Sound: *AudioSource, PosX: float, PosY: float, PosZ: float, VelX: float = 0.0, VelY: float = 0.0, VelZ: float = 0.0, Volume: float = 1.0, Paused: s32 = 0, Bus_instance: u32 = 0) -> u32 #foreign soloud_lib;
Soloud_play3dClocked :: (Soloud_instance: *Soloud, SoundTime: float64, Sound: *AudioSource, PosX: float, PosY: float, PosZ: float, VelX: float = 0.0, VelY: float = 0.0, VelZ: float = 0.0, Volume: float = 1.0, Bus_instance: u32 = 0) -> u32 #foreign soloud_lib;
Soloud_playBackground :: (Soloud_instance: *Soloud, Sound: *AudioSource, Volume: float = -1.0, Paused: s32 = 0, Bus_instance: u32 = 0) -> u32 #foreign soloud_lib;
Soloud_seek :: (Soloud_instance: *Soloud, VoiceHandle: u32, Seconds: float64) -> s32 #foreign soloud_lib;
Soloud_stop :: (Soloud_instance: *Soloud, VoiceHandle: u32) #foreign soloud_lib;
Soloud_stopAll :: (Soloud_instance: *Soloud) #foreign soloud_lib;
Soloud_stopAudioSource :: (Soloud_instance: *Soloud, Sound: *AudioSource) #foreign soloud_lib;
Soloud_countAudioSource :: (Soloud_instance: *Soloud, Sound: *AudioSource) -> s32 #foreign soloud_lib;
Soloud_setFilterParameter :: (Soloud_instance: *Soloud, VoiceHandle: u32, FilterId: u32, AttributeId: u32, Value: float) #foreign soloud_lib;
Soloud_getFilterParameter :: (Soloud_instance: *Soloud, VoiceHandle: u32, FilterId: u32, AttributeId: u32) -> float #foreign soloud_lib;
Soloud_fadeFilterParameter :: (Soloud_instance: *Soloud, VoiceHandle: u32, FilterId: u32, AttributeId: u32, To: float, Time: float64) #foreign soloud_lib;
Soloud_oscillateFilterParameter :: (Soloud_instance: *Soloud, VoiceHandle: u32, FilterId: u32, AttributeId: u32, From: float, To: float, Time: float64) #foreign soloud_lib;
Soloud_getStreamTime :: (Soloud_instance: *Soloud, VoiceHandle: u32) -> float64 #foreign soloud_lib;
Soloud_getStreamPosition :: (Soloud_instance: *Soloud, VoiceHandle: u32) -> float64 #foreign soloud_lib;
Soloud_getPause :: (Soloud_instance: *Soloud, VoiceHandle: u32) -> s32 #foreign soloud_lib;
Soloud_getVolume :: (Soloud_instance: *Soloud, VoiceHandle: u32) -> float #foreign soloud_lib;
Soloud_getOverallVolume :: (Soloud_instance: *Soloud, VoiceHandle: u32) -> float #foreign soloud_lib;
Soloud_getPan :: (Soloud_instance: *Soloud, VoiceHandle: u32) -> float #foreign soloud_lib;
Soloud_getSamplerate :: (Soloud_instance: *Soloud, VoiceHandle: u32) -> float #foreign soloud_lib;
Soloud_getProtectVoice :: (Soloud_instance: *Soloud, VoiceHandle: u32) -> s32 #foreign soloud_lib;
Soloud_getActiveVoiceCount :: (Soloud_instance: *Soloud) -> u32 #foreign soloud_lib;
Soloud_getVoiceCount :: (Soloud_instance: *Soloud) -> u32 #foreign soloud_lib;
Soloud_isValidVoiceHandle :: (Soloud_instance: *Soloud, VoiceHandle: u32) -> s32 #foreign soloud_lib;
Soloud_getRelativePlaySpeed :: (Soloud_instance: *Soloud, VoiceHandle: u32) -> float #foreign soloud_lib;
Soloud_getPostClipScaler :: (Soloud_instance: *Soloud) -> float #foreign soloud_lib;
Soloud_getGlobalVolume :: (Soloud_instance: *Soloud) -> float #foreign soloud_lib;
Soloud_getMaxActiveVoiceCount :: (Soloud_instance: *Soloud) -> u32 #foreign soloud_lib;
Soloud_getLooping :: (Soloud_instance: *Soloud, VoiceHandle: u32) -> s32 #foreign soloud_lib;
Soloud_getLoopPoint :: (Soloud_instance: *Soloud, VoiceHandle: u32) -> float64 #foreign soloud_lib;
Soloud_setLoopPoint :: (Soloud_instance: *Soloud, VoiceHandle: u32, LoopPoint: float64) #foreign soloud_lib;
Soloud_setLooping :: (Soloud_instance: *Soloud, VoiceHandle: u32, Looping: s32) #foreign soloud_lib;
Soloud_setMaxActiveVoiceCount :: (Soloud_instance: *Soloud, VoiceCount: u32) -> s32 #foreign soloud_lib;
Soloud_setInaudibleBehavior :: (Soloud_instance: *Soloud, VoiceHandle: u32, MustTick: s32, Kill: s32) #foreign soloud_lib;
Soloud_setGlobalVolume :: (Soloud_instance: *Soloud, Volume: float) #foreign soloud_lib;
Soloud_setPostClipScaler :: (Soloud_instance: *Soloud, Scaler: float) #foreign soloud_lib;
Soloud_setPause :: (Soloud_instance: *Soloud, VoiceHandle: u32, Pause: s32) #foreign soloud_lib;
Soloud_setPauseAll :: (Soloud_instance: *Soloud, Pause: s32) #foreign soloud_lib;
Soloud_setRelativePlaySpeed :: (Soloud_instance: *Soloud, VoiceHandle: u32, Speed: float) -> s32 #foreign soloud_lib;
Soloud_setProtectVoice :: (Soloud_instance: *Soloud, VoiceHandle: u32, Protect: s32) #foreign soloud_lib;
Soloud_setSamplerate :: (Soloud_instance: *Soloud, VoiceHandle: u32, Samplerate: float) #foreign soloud_lib;
Soloud_setPan :: (Soloud_instance: *Soloud, VoiceHandle: u32, Pan: float) #foreign soloud_lib;
Soloud_setPanAbsolute :: (Soloud_instance: *Soloud, VoiceHandle: u32, LVolume: float, RVolume: float, LBVolume: float = 0, RBVolume: float = 0, CVolume: float = 0, SVolume: float = 0) #foreign soloud_lib;
Soloud_setVolume :: (Soloud_instance: *Soloud, VoiceHandle: u32, Volume: float) #foreign soloud_lib;
Soloud_setDelaySamples :: (Soloud_instance: *Soloud, VoiceHandle: u32, Samples: u32) #foreign soloud_lib;
Soloud_fadeVolume :: (Soloud_instance: *Soloud, VoiceHandle: u32, To: float, Time: float64) #foreign soloud_lib;
Soloud_fadePan :: (Soloud_instance: *Soloud, VoiceHandle: u32, To: float, Time: float64) #foreign soloud_lib;
Soloud_fadeRelativePlaySpeed :: (Soloud_instance: *Soloud, VoiceHandle: u32, To: float, Time: float64) #foreign soloud_lib;
Soloud_fadeGlobalVolume :: (Soloud_instance: *Soloud, To: float, Time: float64) #foreign soloud_lib;
Soloud_schedulePause :: (Soloud_instance: *Soloud, VoiceHandle: u32, Time: float64) #foreign soloud_lib;
Soloud_scheduleStop :: (Soloud_instance: *Soloud, VoiceHandle: u32, Time: float64) #foreign soloud_lib;
Soloud_oscillateVolume :: (Soloud_instance: *Soloud, VoiceHandle: u32, From: float, To: float, Time: float64) #foreign soloud_lib;
Soloud_oscillatePan :: (Soloud_instance: *Soloud, VoiceHandle: u32, From: float, To: float, Time: float64) #foreign soloud_lib;
Soloud_oscillateRelativePlaySpeed :: (Soloud_instance: *Soloud, VoiceHandle: u32, From: float, To: float, Time: float64) #foreign soloud_lib;
Soloud_oscillateGlobalVolume :: (Soloud_instance: *Soloud, From: float, To: float, Time: float64) #foreign soloud_lib;
Soloud_setGlobalFilter :: (Soloud_instance: *Soloud, FilterId: u32, Filter_instance: *Filter) #foreign soloud_lib;
Soloud_setVisualizationEnable :: (Soloud_instance: *Soloud, Enable: s32) #foreign soloud_lib;
Soloud_calcFFT :: (Soloud_instance: *Soloud) -> *float #foreign soloud_lib;
Soloud_getWave :: (Soloud_instance: *Soloud) -> *float #foreign soloud_lib;
Soloud_getApproximateVolume :: (Soloud_instance: *Soloud, Channel: u32) -> float #foreign soloud_lib;
Soloud_getLoopCount :: (Soloud_instance: *Soloud, VoiceHandle: u32) -> u32 #foreign soloud_lib;
Soloud_getInfo :: (Soloud_instance: *Soloud, VoiceHandle: u32, InfoKey: u32) -> float #foreign soloud_lib;
Soloud_createVoiceGroup :: (Soloud_instance: *Soloud) -> u32 #foreign soloud_lib;
Soloud_destroyVoiceGroup :: (Soloud_instance: *Soloud, VoiceGroupHandle: u32) -> s32 #foreign soloud_lib;
Soloud_addVoiceToGroup :: (Soloud_instance: *Soloud, VoiceGroupHandle: u32, VoiceHandle: u32) -> s32 #foreign soloud_lib;
Soloud_isVoiceGroup :: (Soloud_instance: *Soloud, VoiceGroupHandle: u32) -> s32 #foreign soloud_lib;
Soloud_isVoiceGroupEmpty :: (Soloud_instance: *Soloud, VoiceGroupHandle: u32) -> s32 #foreign soloud_lib;
Soloud_update3dAudio :: (Soloud_instance: *Soloud) #foreign soloud_lib;
Soloud_set3dSoundSpeed :: (Soloud_instance: *Soloud, Speed: float) -> s32 #foreign soloud_lib;
Soloud_get3dSoundSpeed :: (Soloud_instance: *Soloud) -> float #foreign soloud_lib;
Soloud_set3dListenerParameters :: (Soloud_instance: *Soloud, PosX: float, PosY: float, PosZ: float, AtX: float, AtY: float, AtZ: float, UpX: float, UpY: float, UpZ: float, VelocityX: float = 0.0, VelocityY: float = 0.0, VelocityZ: float = 0.0) #foreign soloud_lib;
Soloud_set3dListenerPosition :: (Soloud_instance: *Soloud, PosX: float, PosY: float, PosZ: float) #foreign soloud_lib;
Soloud_set3dListenerAt :: (Soloud_instance: *Soloud, AtX: float, AtY: float, AtZ: float) #foreign soloud_lib;
Soloud_set3dListenerUp :: (Soloud_instance: *Soloud, UpX: float, UpY: float, UpZ: float) #foreign soloud_lib;
Soloud_set3dListenerVelocity :: (Soloud_instance: *Soloud, VelocityX: float, VelocityY: float, VelocityZ: float) #foreign soloud_lib;
Soloud_set3dSourceParameters :: (Soloud_instance: *Soloud, VoiceHandle: u32, PosX: float, PosY: float, PosZ: float, VelocityX: float = 0.0, VelocityY: float = 0.0, VelocityZ: float = 0.0) #foreign soloud_lib;
Soloud_set3dSourcePosition :: (Soloud_instance: *Soloud, VoiceHandle: u32, PosX: float, PosY: float, PosZ: float) #foreign soloud_lib;
Soloud_set3dSourceVelocity :: (Soloud_instance: *Soloud, VoiceHandle: u32, VelocityX: float, VelocityY: float, VelocityZ: float) #foreign soloud_lib;
Soloud_set3dSourceMinMaxDistance :: (Soloud_instance: *Soloud, VoiceHandle: u32, MinDistance: float, MaxDistance: float) #foreign soloud_lib;
Soloud_set3dSourceAttenuation :: (Soloud_instance: *Soloud, VoiceHandle: u32, AttenuationModel: u32, AttenuationRolloffFactor: float) #foreign soloud_lib;
Soloud_set3dSourceDopplerFactor :: (Soloud_instance: *Soloud, VoiceHandle: u32, DopplerFactor: float) #foreign soloud_lib;
Soloud_mix :: (Soloud_instance: *Soloud, Buffer: *float, Samples: u32) #foreign soloud_lib;
Soloud_mixSigned16 :: (Soloud_instance: *Soloud, Buffer: *s16, Samples: u32) #foreign soloud_lib;
BassboostFilter_destroy :: (BassboostFilter_instance: *BassboostFilter) #foreign soloud_lib;
BassboostFilter_getParamCount :: (BassboostFilter_instance: *BassboostFilter) -> s32 #foreign soloud_lib;
BassboostFilter_getParamName :: (BassboostFilter_instance: *BassboostFilter, ParamIndex: u32) -> *u8 #foreign soloud_lib;
BassboostFilter_getParamType :: (BassboostFilter_instance: *BassboostFilter, ParamIndex: u32) -> u32 #foreign soloud_lib;
BassboostFilter_getParamMax :: (BassboostFilter_instance: *BassboostFilter, ParamIndex: u32) -> float #foreign soloud_lib;
BassboostFilter_getParamMin :: (BassboostFilter_instance: *BassboostFilter, ParamIndex: u32) -> float #foreign soloud_lib;
BassboostFilter_setParams :: (BassboostFilter_instance: *BassboostFilter, Boost: float) -> s32 #foreign soloud_lib;
BassboostFilter_create :: () -> *BassboostFilter #foreign soloud_lib;
BiquadResonantFilter_destroy :: (BiquadResonantFilter_instance: *BiquadResonantFilter) #foreign soloud_lib;
BiquadResonantFilter_getParamCount :: (BiquadResonantFilter_instance: *BiquadResonantFilter) -> s32 #foreign soloud_lib;
BiquadResonantFilter_getParamName :: (BiquadResonantFilter_instance: *BiquadResonantFilter, ParamIndex: u32) -> *u8 #foreign soloud_lib;
BiquadResonantFilter_getParamType :: (BiquadResonantFilter_instance: *BiquadResonantFilter, ParamIndex: u32) -> u32 #foreign soloud_lib;
BiquadResonantFilter_getParamMax :: (BiquadResonantFilter_instance: *BiquadResonantFilter, ParamIndex: u32) -> float #foreign soloud_lib;
BiquadResonantFilter_getParamMin :: (BiquadResonantFilter_instance: *BiquadResonantFilter, ParamIndex: u32) -> float #foreign soloud_lib;
BiquadResonantFilter_create :: () -> *BiquadResonantFilter #foreign soloud_lib;
BiquadResonantFilter_setParams :: (BiquadResonantFilter_instance: *BiquadResonantFilter, Type: s32, Frequency: float, Resonance: float) -> s32 #foreign soloud_lib;
Bus_destroy :: (Bus_instance: *Bus) #foreign soloud_lib;
Bus_create :: () -> *Bus #foreign soloud_lib;
Bus_setFilter :: (Bus_instance: *Bus, FilterId: u32, Filter_instance: *Filter) #foreign soloud_lib;
Bus_play :: (Bus_instance: *Bus, Sound: *AudioSource, Volume: float = 1.0, Pan: float = 0.0, Paused: s32 = 0) -> u32 #foreign soloud_lib;
Bus_playClocked :: (Bus_instance: *Bus, SoundTime: float64, Sound: *AudioSource, Volume: float = 1.0, Pan: float = 0.0) -> u32 #foreign soloud_lib;
Bus_play3d :: (Bus_instance: *Bus, Sound: *AudioSource, PosX: float, PosY: float, PosZ: float, VelX: float = 0.0, VelY: float = 0.0, VelZ: float = 0.0, Volume: float = 1.0, Paused: s32 = 0) -> u32 #foreign soloud_lib;
Bus_play3dClocked :: (Bus_instance: *Bus, SoundTime: float64, Sound: *AudioSource, PosX: float, PosY: float, PosZ: float, VelX: float = 0.0, VelY: float = 0.0, VelZ: float = 0.0, Volume: float = 1.0) -> u32 #foreign soloud_lib;
Bus_setChannels :: (Bus_instance: *Bus, Channels: u32) -> s32 #foreign soloud_lib;
Bus_setVisualizationEnable :: (Bus_instance: *Bus, Enable: s32) #foreign soloud_lib;
Bus_annexSound :: (Bus_instance: *Bus, VoiceHandle: u32) #foreign soloud_lib;
Bus_calcFFT :: (Bus_instance: *Bus) -> *float #foreign soloud_lib;
Bus_getWave :: (Bus_instance: *Bus) -> *float #foreign soloud_lib;
Bus_getApproximateVolume :: (Bus_instance: *Bus, Channel: u32) -> float #foreign soloud_lib;
Bus_getActiveVoiceCount :: (Bus_instance: *Bus) -> u32 #foreign soloud_lib;
Bus_setVolume :: (Bus_instance: *Bus, Volume: float) #foreign soloud_lib;
Bus_setLooping :: (Bus_instance: *Bus, Loop: s32) #foreign soloud_lib;
Bus_set3dMinMaxDistance :: (Bus_instance: *Bus, MinDistance: float, MaxDistance: float) #foreign soloud_lib;
Bus_set3dAttenuation :: (Bus_instance: *Bus, AttenuationModel: u32, AttenuationRolloffFactor: float) #foreign soloud_lib;
Bus_set3dDopplerFactor :: (Bus_instance: *Bus, DopplerFactor: float) #foreign soloud_lib;
Bus_set3dListenerRelative :: (Bus_instance: *Bus, ListenerRelative: s32) #foreign soloud_lib;
Bus_set3dDistanceDelay :: (Bus_instance: *Bus, DistanceDelay: s32) #foreign soloud_lib;
Bus_set3dCollider :: (Bus_instance: *Bus, Collider: *AudioCollider, UserData: s32 = 0) #foreign soloud_lib;
Bus_set3dAttenuator :: (Bus_instance: *Bus, Attenuator: *AudioAttenuator) #foreign soloud_lib;
Bus_setInaudibleBehavior :: (Bus_instance: *Bus, MustTick: s32, Kill: s32) #foreign soloud_lib;
Bus_setLoopPoint :: (Bus_instance: *Bus, LoopPoint: float64) #foreign soloud_lib;
Bus_getLoopPoint :: (Bus_instance: *Bus) -> float64 #foreign soloud_lib;
Bus_stop :: (Bus_instance: *Bus) #foreign soloud_lib;
DCRemovalFilter_destroy :: (DCRemovalFilter_instance: *DCRemovalFilter) #foreign soloud_lib;
DCRemovalFilter_create :: () -> *DCRemovalFilter #foreign soloud_lib;
DCRemovalFilter_setParams :: (DCRemovalFilter_instance: *DCRemovalFilter, Length: float = 0.1) -> s32 #foreign soloud_lib;
DCRemovalFilter_getParamCount :: (DCRemovalFilter_instance: *DCRemovalFilter) -> s32 #foreign soloud_lib;
DCRemovalFilter_getParamName :: (DCRemovalFilter_instance: *DCRemovalFilter, ParamIndex: u32) -> *u8 #foreign soloud_lib;
DCRemovalFilter_getParamType :: (DCRemovalFilter_instance: *DCRemovalFilter, ParamIndex: u32) -> u32 #foreign soloud_lib;
DCRemovalFilter_getParamMax :: (DCRemovalFilter_instance: *DCRemovalFilter, ParamIndex: u32) -> float #foreign soloud_lib;
DCRemovalFilter_getParamMin :: (DCRemovalFilter_instance: *DCRemovalFilter, ParamIndex: u32) -> float #foreign soloud_lib;
EchoFilter_destroy :: (EchoFilter_instance: *EchoFilter) #foreign soloud_lib;
EchoFilter_getParamCount :: (EchoFilter_instance: *EchoFilter) -> s32 #foreign soloud_lib;
EchoFilter_getParamName :: (EchoFilter_instance: *EchoFilter, ParamIndex: u32) -> *u8 #foreign soloud_lib;
EchoFilter_getParamType :: (EchoFilter_instance: *EchoFilter, ParamIndex: u32) -> u32 #foreign soloud_lib;
EchoFilter_getParamMax :: (EchoFilter_instance: *EchoFilter, ParamIndex: u32) -> float #foreign soloud_lib;
EchoFilter_getParamMin :: (EchoFilter_instance: *EchoFilter, ParamIndex: u32) -> float #foreign soloud_lib;
EchoFilter_create :: () -> *EchoFilter #foreign soloud_lib;
EchoFilter_setParams :: (EchoFilter_instance: *EchoFilter, Delay: float, Decay: float = 0.7, Filter_instance: float = 0.0) -> s32 #foreign soloud_lib;
FFTFilter_destroy :: (FFTFilter_instance: *FFTFilter) #foreign soloud_lib;
FFTFilter_create :: () -> *FFTFilter #foreign soloud_lib;
FFTFilter_getParamCount :: (FFTFilter_instance: *FFTFilter) -> s32 #foreign soloud_lib;
FFTFilter_getParamName :: (FFTFilter_instance: *FFTFilter, ParamIndex: u32) -> *u8 #foreign soloud_lib;
FFTFilter_getParamType :: (FFTFilter_instance: *FFTFilter, ParamIndex: u32) -> u32 #foreign soloud_lib;
FFTFilter_getParamMax :: (FFTFilter_instance: *FFTFilter, ParamIndex: u32) -> float #foreign soloud_lib;
FFTFilter_getParamMin :: (FFTFilter_instance: *FFTFilter, ParamIndex: u32) -> float #foreign soloud_lib;
FlangerFilter_destroy :: (FlangerFilter_instance: *FlangerFilter) #foreign soloud_lib;
FlangerFilter_getParamCount :: (FlangerFilter_instance: *FlangerFilter) -> s32 #foreign soloud_lib;
FlangerFilter_getParamName :: (FlangerFilter_instance: *FlangerFilter, ParamIndex: u32) -> *u8 #foreign soloud_lib;
FlangerFilter_getParamType :: (FlangerFilter_instance: *FlangerFilter, ParamIndex: u32) -> u32 #foreign soloud_lib;
FlangerFilter_getParamMax :: (FlangerFilter_instance: *FlangerFilter, ParamIndex: u32) -> float #foreign soloud_lib;
FlangerFilter_getParamMin :: (FlangerFilter_instance: *FlangerFilter, ParamIndex: u32) -> float #foreign soloud_lib;
FlangerFilter_create :: () -> *FlangerFilter #foreign soloud_lib;
FlangerFilter_setParams :: (FlangerFilter_instance: *FlangerFilter, Delay: float, Freq: float) -> s32 #foreign soloud_lib;
FreeverbFilter_destroy :: (FreeverbFilter_instance: *FreeverbFilter) #foreign soloud_lib;
FreeverbFilter_getParamCount :: (FreeverbFilter_instance: *FreeverbFilter) -> s32 #foreign soloud_lib;
FreeverbFilter_getParamName :: (FreeverbFilter_instance: *FreeverbFilter, ParamIndex: u32) -> *u8 #foreign soloud_lib;
FreeverbFilter_getParamType :: (FreeverbFilter_instance: *FreeverbFilter, ParamIndex: u32) -> u32 #foreign soloud_lib;
FreeverbFilter_getParamMax :: (FreeverbFilter_instance: *FreeverbFilter, ParamIndex: u32) -> float #foreign soloud_lib;
FreeverbFilter_getParamMin :: (FreeverbFilter_instance: *FreeverbFilter, ParamIndex: u32) -> float #foreign soloud_lib;
FreeverbFilter_create :: () -> *FreeverbFilter #foreign soloud_lib;
FreeverbFilter_setParams :: (FreeverbFilter_instance: *FreeverbFilter, Mode: float, RoomSize: float, Damp: float, Width: float) -> s32 #foreign soloud_lib;
LofiFilter_destroy :: (LofiFilter_instance: *LofiFilter) #foreign soloud_lib;
LofiFilter_getParamCount :: (LofiFilter_instance: *LofiFilter) -> s32 #foreign soloud_lib;
LofiFilter_getParamName :: (LofiFilter_instance: *LofiFilter, ParamIndex: u32) -> *u8 #foreign soloud_lib;
LofiFilter_getParamType :: (LofiFilter_instance: *LofiFilter, ParamIndex: u32) -> u32 #foreign soloud_lib;
LofiFilter_getParamMax :: (LofiFilter_instance: *LofiFilter, ParamIndex: u32) -> float #foreign soloud_lib;
LofiFilter_getParamMin :: (LofiFilter_instance: *LofiFilter, ParamIndex: u32) -> float #foreign soloud_lib;
LofiFilter_create :: () -> *LofiFilter #foreign soloud_lib;
LofiFilter_setParams :: (LofiFilter_instance: *LofiFilter, SampleRate: float, Bitdepth: float) -> s32 #foreign soloud_lib;
Monotone_destroy :: (Monotone_instance: *Monotone) #foreign soloud_lib;
Monotone_create :: () -> *Monotone #foreign soloud_lib;
Monotone_setParams :: (Monotone_instance: *Monotone, HardwareChannels: s32, Waveform: s32 = SPEECH_KW_SQUARE) -> s32 #foreign soloud_lib;
Monotone_load :: (Monotone_instance: *Monotone, Filename: *u8) -> s32 #foreign soloud_lib;
Monotone_loadMem :: (Monotone_instance: *Monotone, Mem: *u8, Length: u32, Copy: s32 = 0, TakeOwnership: s32 = 1) -> s32 #foreign soloud_lib;
Monotone_loadFile :: (Monotone_instance: *Monotone, File: *void) -> s32 #foreign soloud_lib;
Monotone_setVolume :: (Monotone_instance: *Monotone, Volume: float) #foreign soloud_lib;
Monotone_setLooping :: (Monotone_instance: *Monotone, Loop: s32) #foreign soloud_lib;
Monotone_set3dMinMaxDistance :: (Monotone_instance: *Monotone, MinDistance: float, MaxDistance: float) #foreign soloud_lib;
Monotone_set3dAttenuation :: (Monotone_instance: *Monotone, AttenuationModel: u32, AttenuationRolloffFactor: float) #foreign soloud_lib;
Monotone_set3dDopplerFactor :: (Monotone_instance: *Monotone, DopplerFactor: float) #foreign soloud_lib;
Monotone_set3dListenerRelative :: (Monotone_instance: *Monotone, ListenerRelative: s32) #foreign soloud_lib;
Monotone_set3dDistanceDelay :: (Monotone_instance: *Monotone, DistanceDelay: s32) #foreign soloud_lib;
Monotone_set3dCollider :: (Monotone_instance: *Monotone, Collider: *AudioCollider, UserData: s32 = 0) #foreign soloud_lib;
Monotone_set3dAttenuator :: (Monotone_instance: *Monotone, Attenuator: *AudioAttenuator) #foreign soloud_lib;
Monotone_setInaudibleBehavior :: (Monotone_instance: *Monotone, MustTick: s32, Kill: s32) #foreign soloud_lib;
Monotone_setLoopPoint :: (Monotone_instance: *Monotone, LoopPoint: float64) #foreign soloud_lib;
Monotone_getLoopPoint :: (Monotone_instance: *Monotone) -> float64 #foreign soloud_lib;
Monotone_setFilter :: (Monotone_instance: *Monotone, FilterId: u32, Filter_instance: *Filter) #foreign soloud_lib;
Monotone_stop :: (Monotone_instance: *Monotone) #foreign soloud_lib;
Noise_destroy :: (Noise_instance: *Noise) #foreign soloud_lib;
Noise_create :: () -> *Noise #foreign soloud_lib;
Noise_setOctaveScale :: (Noise_instance: *Noise, Oct0: float, Oct1: float, Oct2: float, Oct3: float, Oct4: float, Oct5: float, Oct6: float, Oct7: float, Oct8: float, Oct9: float) #foreign soloud_lib;
Noise_setType :: (Noise_instance: *Noise, Type: s32) #foreign soloud_lib;
Noise_setVolume :: (Noise_instance: *Noise, Volume: float) #foreign soloud_lib;
Noise_setLooping :: (Noise_instance: *Noise, Loop: s32) #foreign soloud_lib;
Noise_set3dMinMaxDistance :: (Noise_instance: *Noise, MinDistance: float, MaxDistance: float) #foreign soloud_lib;
Noise_set3dAttenuation :: (Noise_instance: *Noise, AttenuationModel: u32, AttenuationRolloffFactor: float) #foreign soloud_lib;
Noise_set3dDopplerFactor :: (Noise_instance: *Noise, DopplerFactor: float) #foreign soloud_lib;
Noise_set3dListenerRelative :: (Noise_instance: *Noise, ListenerRelative: s32) #foreign soloud_lib;
Noise_set3dDistanceDelay :: (Noise_instance: *Noise, DistanceDelay: s32) #foreign soloud_lib;
Noise_set3dCollider :: (Noise_instance: *Noise, Collider: *AudioCollider, UserData: s32 = 0) #foreign soloud_lib;
Noise_set3dAttenuator :: (Noise_instance: *Noise, Attenuator: *AudioAttenuator) #foreign soloud_lib;
Noise_setInaudibleBehavior :: (Noise_instance: *Noise, MustTick: s32, Kill: s32) #foreign soloud_lib;
Noise_setLoopPoint :: (Noise_instance: *Noise, LoopPoint: float64) #foreign soloud_lib;
Noise_getLoopPoint :: (Noise_instance: *Noise) -> float64 #foreign soloud_lib;
Noise_setFilter :: (Noise_instance: *Noise, FilterId: u32, Filter_instance: *Filter) #foreign soloud_lib;
Noise_stop :: (Noise_instance: *Noise) #foreign soloud_lib;
Openmpt_destroy :: (Openmpt_instance: *Openmpt) #foreign soloud_lib;
Openmpt_create :: () -> *Openmpt #foreign soloud_lib;
Openmpt_load :: (Openmpt_instance: *Openmpt, Filename: *u8) -> s32 #foreign soloud_lib;
Openmpt_loadMem :: (Openmpt_instance: *Openmpt, Mem: *u8, Length: u32, Copy: s32 = 0, TakeOwnership: s32 = 1) -> s32 #foreign soloud_lib;
Openmpt_loadFile :: (Openmpt_instance: *Openmpt, File: *void) -> s32 #foreign soloud_lib;
Openmpt_setVolume :: (Openmpt_instance: *Openmpt, Volume: float) #foreign soloud_lib;
Openmpt_setLooping :: (Openmpt_instance: *Openmpt, Loop: s32) #foreign soloud_lib;
Openmpt_set3dMinMaxDistance :: (Openmpt_instance: *Openmpt, MinDistance: float, MaxDistance: float) #foreign soloud_lib;
Openmpt_set3dAttenuation :: (Openmpt_instance: *Openmpt, AttenuationModel: u32, AttenuationRolloffFactor: float) #foreign soloud_lib;
Openmpt_set3dDopplerFactor :: (Openmpt_instance: *Openmpt, DopplerFactor: float) #foreign soloud_lib;
Openmpt_set3dListenerRelative :: (Openmpt_instance: *Openmpt, ListenerRelative: s32) #foreign soloud_lib;
Openmpt_set3dDistanceDelay :: (Openmpt_instance: *Openmpt, DistanceDelay: s32) #foreign soloud_lib;
Openmpt_set3dCollider :: (Openmpt_instance: *Openmpt, Collider: *AudioCollider, UserData: s32 = 0) #foreign soloud_lib;
Openmpt_set3dAttenuator :: (Openmpt_instance: *Openmpt, Attenuator: *AudioAttenuator) #foreign soloud_lib;
Openmpt_setInaudibleBehavior :: (Openmpt_instance: *Openmpt, MustTick: s32, Kill: s32) #foreign soloud_lib;
Openmpt_setLoopPoint :: (Openmpt_instance: *Openmpt, LoopPoint: float64) #foreign soloud_lib;
Openmpt_getLoopPoint :: (Openmpt_instance: *Openmpt) -> float64 #foreign soloud_lib;
Openmpt_setFilter :: (Openmpt_instance: *Openmpt, FilterId: u32, Filter_instance: *Filter) #foreign soloud_lib;
Openmpt_stop :: (Openmpt_instance: *Openmpt) #foreign soloud_lib;
Queue_destroy :: (Queue_instance: *Queue) #foreign soloud_lib;
Queue_create :: () -> *Queue #foreign soloud_lib;
Queue_play :: (Queue_instance: *Queue, Sound: *AudioSource) -> s32 #foreign soloud_lib;
Queue_getQueueCount :: (Queue_instance: *Queue) -> u32 #foreign soloud_lib;
Queue_isCurrentlyPlaying :: (Queue_instance: *Queue, Sound: *AudioSource) -> s32 #foreign soloud_lib;
Queue_setParamsFromAudioSource :: (Queue_instance: *Queue, Sound: *AudioSource) -> s32 #foreign soloud_lib;
Queue_setParams :: (Queue_instance: *Queue, Samplerate: float, Channels: u32 = 2) -> s32 #foreign soloud_lib;
Queue_setVolume :: (Queue_instance: *Queue, Volume: float) #foreign soloud_lib;
Queue_setLooping :: (Queue_instance: *Queue, Loop: s32) #foreign soloud_lib;
Queue_set3dMinMaxDistance :: (Queue_instance: *Queue, MinDistance: float, MaxDistance: float) #foreign soloud_lib;
Queue_set3dAttenuation :: (Queue_instance: *Queue, AttenuationModel: u32, AttenuationRolloffFactor: float) #foreign soloud_lib;
Queue_set3dDopplerFactor :: (Queue_instance: *Queue, DopplerFactor: float) #foreign soloud_lib;
Queue_set3dListenerRelative :: (Queue_instance: *Queue, ListenerRelative: s32) #foreign soloud_lib;
Queue_set3dDistanceDelay :: (Queue_instance: *Queue, DistanceDelay: s32) #foreign soloud_lib;
Queue_set3dCollider :: (Queue_instance: *Queue, Collider: *AudioCollider, UserData: s32 = 0) #foreign soloud_lib;
Queue_set3dAttenuator :: (Queue_instance: *Queue, Attenuator: *AudioAttenuator) #foreign soloud_lib;
Queue_setInaudibleBehavior :: (Queue_instance: *Queue, MustTick: s32, Kill: s32) #foreign soloud_lib;
Queue_setLoopPoint :: (Queue_instance: *Queue, LoopPoint: float64) #foreign soloud_lib;
Queue_getLoopPoint :: (Queue_instance: *Queue) -> float64 #foreign soloud_lib;
Queue_setFilter :: (Queue_instance: *Queue, FilterId: u32, Filter_instance: *Filter) #foreign soloud_lib;
Queue_stop :: (Queue_instance: *Queue) #foreign soloud_lib;
RobotizeFilter_destroy :: (RobotizeFilter_instance: *RobotizeFilter) #foreign soloud_lib;
RobotizeFilter_getParamCount :: (RobotizeFilter_instance: *RobotizeFilter) -> s32 #foreign soloud_lib;
RobotizeFilter_getParamName :: (RobotizeFilter_instance: *RobotizeFilter, ParamIndex: u32) -> *u8 #foreign soloud_lib;
RobotizeFilter_getParamType :: (RobotizeFilter_instance: *RobotizeFilter, ParamIndex: u32) -> u32 #foreign soloud_lib;
RobotizeFilter_getParamMax :: (RobotizeFilter_instance: *RobotizeFilter, ParamIndex: u32) -> float #foreign soloud_lib;
RobotizeFilter_getParamMin :: (RobotizeFilter_instance: *RobotizeFilter, ParamIndex: u32) -> float #foreign soloud_lib;
RobotizeFilter_setParams :: (RobotizeFilter_instance: *RobotizeFilter, Freq: float, Waveform: s32) #foreign soloud_lib;
RobotizeFilter_create :: () -> *RobotizeFilter #foreign soloud_lib;
Sfxr_destroy :: (Sfxr_instance: *Sfxr) #foreign soloud_lib;
Sfxr_create :: () -> *Sfxr #foreign soloud_lib;
Sfxr_resetParams :: (Sfxr_instance: *Sfxr) #foreign soloud_lib;
Sfxr_loadParams :: (Sfxr_instance: *Sfxr, Filename: *u8) -> s32 #foreign soloud_lib;
Sfxr_loadParamsMem :: (Sfxr_instance: *Sfxr, Mem: *u8, Length: u32, Copy: s32 = 0, TakeOwnership: s32 = 1) -> s32 #foreign soloud_lib;
Sfxr_loadParamsFile :: (Sfxr_instance: *Sfxr, File: *void) -> s32 #foreign soloud_lib;
Sfxr_loadPreset :: (Sfxr_instance: *Sfxr, PresetNo: s32, RandSeed: s32) -> s32 #foreign soloud_lib;
Sfxr_setVolume :: (Sfxr_instance: *Sfxr, Volume: float) #foreign soloud_lib;
Sfxr_setLooping :: (Sfxr_instance: *Sfxr, Loop: s32) #foreign soloud_lib;
Sfxr_set3dMinMaxDistance :: (Sfxr_instance: *Sfxr, MinDistance: float, MaxDistance: float) #foreign soloud_lib;
Sfxr_set3dAttenuation :: (Sfxr_instance: *Sfxr, AttenuationModel: u32, AttenuationRolloffFactor: float) #foreign soloud_lib;
Sfxr_set3dDopplerFactor :: (Sfxr_instance: *Sfxr, DopplerFactor: float) #foreign soloud_lib;
Sfxr_set3dListenerRelative :: (Sfxr_instance: *Sfxr, ListenerRelative: s32) #foreign soloud_lib;
Sfxr_set3dDistanceDelay :: (Sfxr_instance: *Sfxr, DistanceDelay: s32) #foreign soloud_lib;
Sfxr_set3dCollider :: (Sfxr_instance: *Sfxr, Collider: *AudioCollider, UserData: s32 = 0) #foreign soloud_lib;
Sfxr_set3dAttenuator :: (Sfxr_instance: *Sfxr, Attenuator: *AudioAttenuator) #foreign soloud_lib;
Sfxr_setInaudibleBehavior :: (Sfxr_instance: *Sfxr, MustTick: s32, Kill: s32) #foreign soloud_lib;
Sfxr_setLoopPoint :: (Sfxr_instance: *Sfxr, LoopPoint: float64) #foreign soloud_lib;
Sfxr_getLoopPoint :: (Sfxr_instance: *Sfxr) -> float64 #foreign soloud_lib;
Sfxr_setFilter :: (Sfxr_instance: *Sfxr, FilterId: u32, Filter_instance: *Filter) #foreign soloud_lib;
Sfxr_stop :: (Sfxr_instance: *Sfxr) #foreign soloud_lib;
Speech_destroy :: (Speech_instance: *Speech) #foreign soloud_lib;
Speech_create :: () -> *Speech #foreign soloud_lib;
Speech_setText :: (Speech_instance: *Speech, Text: *u8) -> s32 #foreign soloud_lib;
Speech_setParams :: (Speech_instance: *Speech, BaseFrequency: u32 = 1330, BaseSpeed: float = 10.0, BaseDeclination: float = 0.5, BaseWaveform: s32 = SPEECH_KW_TRIANGLE) -> s32 #foreign soloud_lib;
Speech_setVolume :: (Speech_instance: *Speech, Volume: float) #foreign soloud_lib;
Speech_setLooping :: (Speech_instance: *Speech, Loop: s32) #foreign soloud_lib;
Speech_set3dMinMaxDistance :: (Speech_instance: *Speech, MinDistance: float, MaxDistance: float) #foreign soloud_lib;
Speech_set3dAttenuation :: (Speech_instance: *Speech, AttenuationModel: u32, AttenuationRolloffFactor: float) #foreign soloud_lib;
Speech_set3dDopplerFactor :: (Speech_instance: *Speech, DopplerFactor: float) #foreign soloud_lib;
Speech_set3dListenerRelative :: (Speech_instance: *Speech, ListenerRelative: s32) #foreign soloud_lib;
Speech_set3dDistanceDelay :: (Speech_instance: *Speech, DistanceDelay: s32) #foreign soloud_lib;
Speech_set3dCollider :: (Speech_instance: *Speech, Collider: *AudioCollider, UserData: s32 = 0) #foreign soloud_lib;
Speech_set3dAttenuator :: (Speech_instance: *Speech, Attenuator: *AudioAttenuator) #foreign soloud_lib;
Speech_setInaudibleBehavior :: (Speech_instance: *Speech, MustTick: s32, Kill: s32) #foreign soloud_lib;
Speech_setLoopPoint :: (Speech_instance: *Speech, LoopPoint: float64) #foreign soloud_lib;
Speech_getLoopPoint :: (Speech_instance: *Speech) -> float64 #foreign soloud_lib;
Speech_setFilter :: (Speech_instance: *Speech, FilterId: u32, Filter_instance: *Filter) #foreign soloud_lib;
Speech_stop :: (Speech_instance: *Speech) #foreign soloud_lib;
TedSid_destroy :: (TedSid_instance: *TedSid) #foreign soloud_lib;
TedSid_create :: () -> *TedSid #foreign soloud_lib;
TedSid_load :: (TedSid_instance: *TedSid, Filename: *u8) -> s32 #foreign soloud_lib;
TedSid_loadToMem :: (TedSid_instance: *TedSid, Filename: *u8) -> s32 #foreign soloud_lib;
TedSid_loadMem :: (TedSid_instance: *TedSid, Mem: *u8, Length: u32, Copy: s32 = 0, TakeOwnership: s32 = 1) -> s32 #foreign soloud_lib;
TedSid_loadFileToMem :: (TedSid_instance: *TedSid, File: *void) -> s32 #foreign soloud_lib;
TedSid_loadFile :: (TedSid_instance: *TedSid, File: *void) -> s32 #foreign soloud_lib;
TedSid_setVolume :: (TedSid_instance: *TedSid, Volume: float) #foreign soloud_lib;
TedSid_setLooping :: (TedSid_instance: *TedSid, Loop: s32) #foreign soloud_lib;
TedSid_set3dMinMaxDistance :: (TedSid_instance: *TedSid, MinDistance: float, MaxDistance: float) #foreign soloud_lib;
TedSid_set3dAttenuation :: (TedSid_instance: *TedSid, AttenuationModel: u32, AttenuationRolloffFactor: float) #foreign soloud_lib;
TedSid_set3dDopplerFactor :: (TedSid_instance: *TedSid, DopplerFactor: float) #foreign soloud_lib;
TedSid_set3dListenerRelative :: (TedSid_instance: *TedSid, ListenerRelative: s32) #foreign soloud_lib;
TedSid_set3dDistanceDelay :: (TedSid_instance: *TedSid, DistanceDelay: s32) #foreign soloud_lib;
TedSid_set3dCollider :: (TedSid_instance: *TedSid, Collider: *AudioCollider, UserData: s32 = 0) #foreign soloud_lib;
TedSid_set3dAttenuator :: (TedSid_instance: *TedSid, Attenuator: *AudioAttenuator) #foreign soloud_lib;
TedSid_setInaudibleBehavior :: (TedSid_instance: *TedSid, MustTick: s32, Kill: s32) #foreign soloud_lib;
TedSid_setLoopPoint :: (TedSid_instance: *TedSid, LoopPoint: float64) #foreign soloud_lib;
TedSid_getLoopPoint :: (TedSid_instance: *TedSid) -> float64 #foreign soloud_lib;
TedSid_setFilter :: (TedSid_instance: *TedSid, FilterId: u32, Filter_instance: *Filter) #foreign soloud_lib;
TedSid_stop :: (TedSid_instance: *TedSid) #foreign soloud_lib;
Vic_destroy :: (Vic_instance: *Vic) #foreign soloud_lib;
Vic_create :: () -> *Vic #foreign soloud_lib;
Vic_setModel :: (Vic_instance: *Vic, model: s32) #foreign soloud_lib;
Vic_getModel :: (Vic_instance: *Vic) -> s32 #foreign soloud_lib;
Vic_setRegister :: (Vic_instance: *Vic, reg: s32, value: u8) #foreign soloud_lib;
Vic_getRegister :: (Vic_instance: *Vic, reg: s32) -> u8 #foreign soloud_lib;
Vic_setVolume :: (Vic_instance: *Vic, Volume: float) #foreign soloud_lib;
Vic_setLooping :: (Vic_instance: *Vic, Loop: s32) #foreign soloud_lib;
Vic_set3dMinMaxDistance :: (Vic_instance: *Vic, MinDistance: float, MaxDistance: float) #foreign soloud_lib;
Vic_set3dAttenuation :: (Vic_instance: *Vic, AttenuationModel: u32, AttenuationRolloffFactor: float) #foreign soloud_lib;
Vic_set3dDopplerFactor :: (Vic_instance: *Vic, DopplerFactor: float) #foreign soloud_lib;
Vic_set3dListenerRelative :: (Vic_instance: *Vic, ListenerRelative: s32) #foreign soloud_lib;
Vic_set3dDistanceDelay :: (Vic_instance: *Vic, DistanceDelay: s32) #foreign soloud_lib;
Vic_set3dCollider :: (Vic_instance: *Vic, Collider: *AudioCollider, UserData: s32 = 0) #foreign soloud_lib;
Vic_set3dAttenuator :: (Vic_instance: *Vic, Attenuator: *AudioAttenuator) #foreign soloud_lib;
Vic_setInaudibleBehavior :: (Vic_instance: *Vic, MustTick: s32, Kill: s32) #foreign soloud_lib;
Vic_setLoopPoint :: (Vic_instance: *Vic, LoopPoint: float64) #foreign soloud_lib;
Vic_getLoopPoint :: (Vic_instance: *Vic) -> float64 #foreign soloud_lib;
Vic_setFilter :: (Vic_instance: *Vic, FilterId: u32, Filter_instance: *Filter) #foreign soloud_lib;
Vic_stop :: (Vic_instance: *Vic) #foreign soloud_lib;
Vizsn_destroy :: (Vizsn_instance: *Vizsn) #foreign soloud_lib;
Vizsn_create :: () -> *Vizsn #foreign soloud_lib;
Vizsn_setText :: (Vizsn_instance: *Vizsn, Text: *u8) #foreign soloud_lib;
Vizsn_setVolume :: (Vizsn_instance: *Vizsn, Volume: float) #foreign soloud_lib;
Vizsn_setLooping :: (Vizsn_instance: *Vizsn, Loop: s32) #foreign soloud_lib;
Vizsn_set3dMinMaxDistance :: (Vizsn_instance: *Vizsn, MinDistance: float, MaxDistance: float) #foreign soloud_lib;
Vizsn_set3dAttenuation :: (Vizsn_instance: *Vizsn, AttenuationModel: u32, AttenuationRolloffFactor: float) #foreign soloud_lib;
Vizsn_set3dDopplerFactor :: (Vizsn_instance: *Vizsn, DopplerFactor: float) #foreign soloud_lib;
Vizsn_set3dListenerRelative :: (Vizsn_instance: *Vizsn, ListenerRelative: s32) #foreign soloud_lib;
Vizsn_set3dDistanceDelay :: (Vizsn_instance: *Vizsn, DistanceDelay: s32) #foreign soloud_lib;
Vizsn_set3dCollider :: (Vizsn_instance: *Vizsn, Collider: *AudioCollider, UserData: s32 = 0) #foreign soloud_lib;
Vizsn_set3dAttenuator :: (Vizsn_instance: *Vizsn, Attenuator: *AudioAttenuator) #foreign soloud_lib;
Vizsn_setInaudibleBehavior :: (Vizsn_instance: *Vizsn, MustTick: s32, Kill: s32) #foreign soloud_lib;
Vizsn_setLoopPoint :: (Vizsn_instance: *Vizsn, LoopPoint: float64) #foreign soloud_lib;
Vizsn_getLoopPoint :: (Vizsn_instance: *Vizsn) -> float64 #foreign soloud_lib;
Vizsn_setFilter :: (Vizsn_instance: *Vizsn, FilterId: u32, Filter_instance: *Filter) #foreign soloud_lib;
Vizsn_stop :: (Vizsn_instance: *Vizsn) #foreign soloud_lib;
Wav_destroy :: (Wav_instance: *Wav) #foreign soloud_lib;
Wav_create :: () -> *Wav #foreign soloud_lib;
Wav_load :: (Wav_instance: *Wav, Filename: *u8) -> s32 #foreign soloud_lib;
Wav_loadMem :: (Wav_instance: *Wav, Mem: *u8, Length: u32, Copy: s32 = 0, TakeOwnership: s32 = 1) -> s32 #foreign soloud_lib;
Wav_loadFile :: (Wav_instance: *Wav, File: *void) -> s32 #foreign soloud_lib;
Wav_loadRawWave8 :: (Wav_instance: *Wav, Mem: *u8, Length: u32, Samplerate: float = 44100.0, Channels: u32 = 1) -> s32 #foreign soloud_lib;
Wav_loadRawWave16 :: (Wav_instance: *Wav, Mem: *s16, Length: u32, Samplerate: float = 44100.0, Channels: u32 = 1) -> s32 #foreign soloud_lib;
Wav_loadRawWave :: (Wav_instance: *Wav, Mem: *float, Length: u32, Samplerate: float = 44100.0, Channels: u32 = 1, Copy: s32 = 0, TakeOwnership: s32 = 1) -> s32 #foreign soloud_lib;
Wav_getLength :: (Wav_instance: *Wav) -> float64 #foreign soloud_lib;
Wav_setVolume :: (Wav_instance: *Wav, Volume: float) #foreign soloud_lib;
Wav_setLooping :: (Wav_instance: *Wav, Loop: s32) #foreign soloud_lib;
Wav_set3dMinMaxDistance :: (Wav_instance: *Wav, MinDistance: float, MaxDistance: float) #foreign soloud_lib;
Wav_set3dAttenuation :: (Wav_instance: *Wav, AttenuationModel: u32, AttenuationRolloffFactor: float) #foreign soloud_lib;
Wav_set3dDopplerFactor :: (Wav_instance: *Wav, DopplerFactor: float) #foreign soloud_lib;
Wav_set3dListenerRelative :: (Wav_instance: *Wav, ListenerRelative: s32) #foreign soloud_lib;
Wav_set3dDistanceDelay :: (Wav_instance: *Wav, DistanceDelay: s32) #foreign soloud_lib;
Wav_set3dCollider :: (Wav_instance: *Wav, Collider: *AudioCollider, UserData: s32 = 0) #foreign soloud_lib;
Wav_set3dAttenuator :: (Wav_instance: *Wav, Attenuator: *AudioAttenuator) #foreign soloud_lib;
Wav_setInaudibleBehavior :: (Wav_instance: *Wav, MustTick: s32, Kill: s32) #foreign soloud_lib;
Wav_setLoopPoint :: (Wav_instance: *Wav, LoopPoint: float64) #foreign soloud_lib;
Wav_getLoopPoint :: (Wav_instance: *Wav) -> float64 #foreign soloud_lib;
Wav_setFilter :: (Wav_instance: *Wav, FilterId: u32, Filter_instance: *Filter) #foreign soloud_lib;
Wav_stop :: (Wav_instance: *Wav) #foreign soloud_lib;
WaveShaperFilter_destroy :: (WaveShaperFilter_instance: *WaveShaperFilter) #foreign soloud_lib;
WaveShaperFilter_setParams :: (WaveShaperFilter_instance: *WaveShaperFilter, Amount: float) -> s32 #foreign soloud_lib;
WaveShaperFilter_create :: () -> *WaveShaperFilter #foreign soloud_lib;
WaveShaperFilter_getParamCount :: (WaveShaperFilter_instance: *WaveShaperFilter) -> s32 #foreign soloud_lib;
WaveShaperFilter_getParamName :: (WaveShaperFilter_instance: *WaveShaperFilter, ParamIndex: u32) -> *u8 #foreign soloud_lib;
WaveShaperFilter_getParamType :: (WaveShaperFilter_instance: *WaveShaperFilter, ParamIndex: u32) -> u32 #foreign soloud_lib;
WaveShaperFilter_getParamMax :: (WaveShaperFilter_instance: *WaveShaperFilter, ParamIndex: u32) -> float #foreign soloud_lib;
WaveShaperFilter_getParamMin :: (WaveShaperFilter_instance: *WaveShaperFilter, ParamIndex: u32) -> float #foreign soloud_lib;
WavStream_destroy :: (WavStream_instance: *WavStream) #foreign soloud_lib;
WavStream_create :: () -> *WavStream #foreign soloud_lib;
WavStream_load :: (WavStream_instance: *WavStream, Filename: *u8) -> s32 #foreign soloud_lib;
WavStream_loadMem :: (WavStream_instance: *WavStream, Data: *u8, DataLen: u32, Copy: s32 = 0, TakeOwnership: s32 = 1) -> s32 #foreign soloud_lib;
WavStream_loadToMem :: (WavStream_instance: *WavStream, Filename: *u8) -> s32 #foreign soloud_lib;
WavStream_loadFile :: (WavStream_instance: *WavStream, File: *void) -> s32 #foreign soloud_lib;
WavStream_loadFileToMem :: (WavStream_instance: *WavStream, File: *void) -> s32 #foreign soloud_lib;
WavStream_getLength :: (WavStream_instance: *WavStream) -> float64 #foreign soloud_lib;
WavStream_setVolume :: (WavStream_instance: *WavStream, Volume: float) #foreign soloud_lib;
WavStream_setLooping :: (WavStream_instance: *WavStream, Loop: s32) #foreign soloud_lib;
WavStream_set3dMinMaxDistance :: (WavStream_instance: *WavStream, MinDistance: float, MaxDistance: float) #foreign soloud_lib;
WavStream_set3dAttenuation :: (WavStream_instance: *WavStream, AttenuationModel: u32, AttenuationRolloffFactor: float) #foreign soloud_lib;
WavStream_set3dDopplerFactor :: (WavStream_instance: *WavStream, DopplerFactor: float) #foreign soloud_lib;
WavStream_set3dListenerRelative :: (WavStream_instance: *WavStream, ListenerRelative: s32) #foreign soloud_lib;
WavStream_set3dDistanceDelay :: (WavStream_instance: *WavStream, DistanceDelay: s32) #foreign soloud_lib;
WavStream_set3dCollider :: (WavStream_instance: *WavStream, Collider: *AudioCollider, UserData: s32 = 0) #foreign soloud_lib;
WavStream_set3dAttenuator :: (WavStream_instance: *WavStream, Attenuator: *AudioAttenuator) #foreign soloud_lib;
WavStream_setInaudibleBehavior :: (WavStream_instance: *WavStream, MustTick: s32, Kill: s32) #foreign soloud_lib;
WavStream_setLoopPoint :: (WavStream_instance: *WavStream, LoopPoint: float64) #foreign soloud_lib;
WavStream_getLoopPoint :: (WavStream_instance: *WavStream) -> float64 #foreign soloud_lib;
WavStream_setFilter :: (WavStream_instance: *WavStream, FilterId: u32, Filter_instance: *Filter) #foreign soloud_lib;
WavStream_stop :: (WavStream_instance: *WavStream) #foreign soloud_lib;

#scope_file

#if OS == .WINDOWS {
    #if LINK_STATIC {
        #library,no_dll "soloud_static_c_x64";
        #system_library "uuid";
        soloud_lib :: #library,no_dll "soloud_static_x64";
    } else {
        soloud_lib :: #library "soloud_x64";
    }
}
